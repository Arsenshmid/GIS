mysite/app/templates/home.html
<!DOCTYPE html>
<html>
<head>
    <title>Map</title>
    <!-- Подключение Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">Map</h1>
        <div class="row">
            <div class="col-md-8">
                <!-- Отображение карты в отдельном блоке -->
                <div class="card mb-4">
                    <div class="card-body">
                        {{ map|safe }}
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Кнопка для перехода к графику -->
                <a href="{% url 'chart' %}" class="btn btn-primary btn-block">Go to Chart</a>
            </div>
        </div>
    </div>
    <!-- Подключение Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
</body>
</html>

код для графика NDVI урожая в Якутске.txt
// Вычисление NDVI для Якутска
var geometry = ee.Geometry.Polygon(
  [[[129.0, 63.5],
    [129.0, 63.7],
    [129.3, 63.7],
    [129.3, 63.5]]]);

// Создание коллекции изображений Sentinel-2
var S2 = ee.ImageCollection('COPERNICUS/S2')
  .filterDate('2018-09-01', '2019-10-31')
  .filterBounds(geometry);

// Маскирование облачности
var maskcloud1 = function(image) {
  var QA60 = image.select(['QA60']);
  return image.updateMask(QA60.lt(1));
};

S2 = S2.map(maskcloud1);

// Вычисление NDVI
var addNDVI = function(image) {
  return image.addBands(image.normalizedDifference(['B8', 'B4']).rename('NDVI'));
};

S2 = S2.map(addNDVI);

// Получение медианного NDVI
var NDVImed = S2.select(['NDVI']).median();

// Визуализация
var ndvi_pal = ['#d73027', '#f46d43', '#fdae61', '#fee08b', '#d9ef8b', '#a6d96a'];
Map.addLayer(NDVImed.clip(geometry), {min: -0.5, max: 0.9, palette: ndvi_pal}, 'NDVI');

// Вывод временного ряда NDVI
var plotNDVI = ui.Chart.image.seriesByRegion({
  imageCollection: S2,
  regions: geometry,
  reducer: ee.Reducer.mean(),
  band: 'NDVI',
  scale: 500
})
.setChartType('LineChart')
.setOptions({
  title: 'NDVI временной ряд',
  hAxis: {title: 'Дата'},
  vAxis: {title: 'NDVI'}
});

print(plotNDVI);

mysite/загрузка в google earth engine.txt
# Импорт библиотеки Earth Engine
import ee

# Инициализация Earth Engine
ee.Initialize()

# Создание FeatureCollection из вымышленных данных
data = [
    {'latitude': 46.931625, 'longitude': -84.52694, 'weight': 100, 'irrigated': True, 'crop': 'soy'},
    {'latitude': 42.71689167, 'longitude': -94.25526333, 'weight': 80, 'irrigated': False, 'crop': 'corn'},
    # Добавьте другие точки урожая...
]

# Создание FeatureCollection
points = ee.FeatureCollection([ee.Feature(ee.Geometry.Point(d['longitude'], d['latitude']), d) for d in data])

# Визуализация точек
Map.addLayer(points, {'color': 'FF0000'}, 'Точки урожая')

# Загрузка данных в GEE
asset_id = 'users/ваш_пользовательский_путь/имя_файла'
ee.data.createAsset({'type': 'FeatureCollection'}, asset_id, points.getInfo())

print(f"Данные успешно загружены в GEE: {asset_id}")

mysite/сгенерировать тестовые данные.py
import pandas as pd
import numpy as np

# Создаем пустой DataFrame
df = pd.DataFrame(columns=['latitude', 'longitude', 'weight', 'irrigated', 'crop'])

# Задаем границы области внутри Якутска (примерно 38x38 метров)
min_lat, max_lat = 62.011, 62.0118  # Уменьшаем границы
min_lon, max_lon = 129.011, 129.0118  # Уменьшаем границы

# Задаем шаг для генерации точек
step = 0.00005  # Увеличиваем шаг до примерно 50 метров

# Заполняем DataFrame данными
prev_weight = np.random.randint(0, 101)  # вес урожая в кг (от 0 до 1000 кг)
for lat in np.arange(min_lat, max_lat, step):
    for lon in np.arange(min_lon, max_lon, step):
        weight = prev_weight + np.random.randint(-50, 51)  # вес урожая в кг (от 0 до 1000 кг)
        weight = max(0, weight)  # убедимся, что вес не станет отрицательным
        weight = min(100, weight)  # убедимся, что вес не превысит 1000
        prev_weight = weight
        irrigated = np.random.choice([True, False])  # орошалась ли область
        crop = np.random.choice(['wheat', 'corn', 'soy'])  # какая культура была посажена

        new_row = pd.DataFrame([[lat, lon, weight, irrigated, crop]], columns=df.columns)
        df = pd.concat([df, new_row], ignore_index=True)

# Сохраняем DataFrame в файл CSV
df.to_csv('synthetic_data.csv', index=False)

mysite/app/models.py
from django.db import models
from django.utils import timezone

class HarvestData(models.Model):
    latitude = models.FloatField()
    longitude = models.FloatField()
    weight = models.FloatField()
    irrigated = models.BooleanField()
    crop = models.CharField(max_length=200)
    date = models.DateField(default=timezone.now)  # Установил значение по умолчанию на текущую дату

mysite/app/views.py
import folium
from django.shortcuts import render
import pandas as pd
from .models import HarvestData
import numpy as np
import matplotlib.pyplot as plt
from django.shortcuts import render
from .models import HarvestData
from io import BytesIO
import base64
from shapely.geometry import Polygon
import geopandas as gpd
import pandas as pd
from django.http import HttpResponse
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')

def chart_view(request):
    # Считываем данные из файла ee-chart.csv
    data_df = pd.read_csv('ee-chart.csv')

    # Создаем график
    plt.figure(figsize=(10, 5))
    plt.plot(data_df['system:time_start'], data_df['NDVI'])
    plt.title('NDVI временной ряд')
    plt.xlabel('Дата')
    plt.ylabel('NDVI')

    # Сохраняем график в PNG
    buf = BytesIO()
    plt.savefig(buf, format='png')
    image_base64 = base64.b64encode(buf.getvalue()).decode('utf-8').replace('\n', '')
    buf.close()

    return render(request, 'chart.html', {'image_base64': image_base64})


    
def load_data():
    # Чтение данных из CSV-файла
    df = pd.read_csv('synthetic_data.csv')

    # Загрузка данных в модель Django
    for index, row in df.iterrows():
        data = HarvestData(latitude=row['latitude'], longitude=row['longitude'], weight=row['weight'], irrigated=row['irrigated'], crop=row['crop'])
        data.save()



def map_view(request):
    # Загрузка данных
    load_data()

    # Создание карты
    m = folium.Map(location=[62.0115, 129.0115], zoom_start=18)  # Центральная точка области

    # Создание списка координат всех точек
    coords = [(data.latitude, data.longitude) for data in HarvestData.objects.all()]

    # Создание полигона по границе крайних точек
    polygon = Polygon(coords)

    # Создание GeoDataFrame с полигона
    gdf = gpd.GeoDataFrame([1], geometry=[polygon], crs="EPSG:4326")

    # Добавление полигона на карту
    folium.GeoJson(gdf).add_to(m)

    # Добавление данных из модели Django на карту
    for data in HarvestData.objects.all():
        # Выбор цвета в зависимости от веса урожая
        if data.weight < 30:
            color = 'red'
        elif data.weight < 60:
            color = 'yellow'
        else:
            color = 'green'

        # Добавление маркера на карту
        folium.CircleMarker([data.latitude, data.longitude], radius=10, popup=f'Weight: {data.weight}', color=color, fill=True, fill_color=color).add_to(m)

    # Генерация HTML-строки с картой
    m = m._repr_html_()

    return render(request, 'home.html', {'map': m})




def calculate_ndvi(request):
    # Загрузка данных из CSV
    data = pd.read_csv('synthetic_data.csv')

    # Проверка наличия необходимых столбцов
    if 'NIR' in data.columns and 'Red' in data.columns:
        # Расчет NDVI
        data['NDVI'] = (data['NIR'] - data['Red']) / (data['NIR'] + data['Red'])

        # Возвращение данных в виде HTTP-ответа
        response = HttpResponse(data.to_csv(index=False), content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename=ndvi.csv'

        return response
    else:
        return HttpResponse('Ошибка: в данных отсутствуют столбцы NIR и Red.')
    


mysite/app/urls.py
from django.urls import path
from . import views
from .views import calculate_ndvi, chart_view, load_data, map_view

urlpatterns = [
    path('', views.map_view, name='map'),
    path('chart/', views.chart_view, name='chart'),
    path('calculate_ndvi/', calculate_ndvi, name='calculate_ndvi'),
    path('chart_view/', chart_view, name='chart_view'),
    path('load_data/', load_data, name='load_data'),
    path('map_view/', map_view, name='map_view'),
]

mysite/mysite/urls.py

# mysite/urls.py
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('app.urls')),
]
mysite/mysite/settings.py
"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ws!l)%*+cxj(75!fcdn!rnxlbyw9_y508!wuiyp!&o!^6go(^s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'app' / 'templates'],  # Путь к каталогу с шаблонами вашего приложения
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'templates',  # Путь к каталогу с шаблонами
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

mysite/app/apps.py
from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'app'

mysite/app/admin.py
from django.contrib import admin

# Register your models here.

